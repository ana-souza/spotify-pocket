{"ast":null,"code":"/**\n * Request Function\n * @param {string} url\n * @param {object} options\n * @returns {Promise<any>}\n */\nexport const request = async (url, options = {}) => {\n  if (!url) {\n    throw new Error('O parâmetro URL é obrigatório');\n  }\n\n  const handleErrors = response => {\n    if (!response.ok) {\n      const {\n        status\n      } = response;\n      throw status;\n    }\n\n    return response.json();\n  };\n\n  return await fetch(url, options).then(handleErrors);\n};\n/**\n *\n * @param {string} rawURL\n * @param {object} urlKey\n * @returns {*}\n */\n\nexport const sanitizeUrl = (rawURL, urlKey) => {\n  const property = Object.keys(urlKey)[0];\n  return rawURL.replace(`{${property}}`, urlKey[property]);\n};","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/modules/request.js"],"names":["request","url","options","Error","handleErrors","response","ok","status","json","fetch","then","sanitizeUrl","rawURL","urlKey","property","Object","keys","replace"],"mappings":"AAAA;;;;;;AAMA,OAAO,MAAMA,OAAO,GAAG,OAAOC,GAAP,EAAYC,OAAO,GAAG,EAAtB,KAA+B;AACpD,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAMC,YAAY,GAAIC,QAAD,IAAc;AACjC,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAM;AAAEC,QAAAA;AAAF,UAAaF,QAAnB;AAEA,YAAME,MAAN;AACD;;AAED,WAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,GARD;;AAUA,SAAO,MAAMC,KAAK,CAACR,GAAD,EAAMC,OAAN,CAAL,CAAoBQ,IAApB,CAAyBN,YAAzB,CAAb;AACD,CAhBM;AAkBP;;;;;;;AAMA,OAAO,MAAMO,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC7C,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoB,CAApB,CAAjB;AAEA,SAAOD,MAAM,CAACK,OAAP,CAAgB,IAAGH,QAAS,GAA5B,EAAgCD,MAAM,CAACC,QAAD,CAAtC,CAAP;AACD,CAJM","sourcesContent":["/**\n * Request Function\n * @param {string} url\n * @param {object} options\n * @returns {Promise<any>}\n */\nexport const request = async (url, options = {}, ) => {\n  if (!url) {\n    throw new Error('O parâmetro URL é obrigatório');\n  }\n\n  const handleErrors = (response) => {\n    if (!response.ok) {\n      const { status } = response;\n\n      throw status;\n    }\n\n    return response.json();\n  }\n\n  return await fetch(url, options).then(handleErrors)\n}\n\n/**\n *\n * @param {string} rawURL\n * @param {object} urlKey\n * @returns {*}\n */\nexport const sanitizeUrl = (rawURL, urlKey) => {\n  const property = Object.keys(urlKey)[0];\n\n  return rawURL.replace(`{${property}}`, urlKey[property]);\n}\n"]},"metadata":{},"sourceType":"module"}