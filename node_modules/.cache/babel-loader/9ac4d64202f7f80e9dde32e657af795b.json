{"ast":null,"code":"import { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeTrackToPlayer, setPlayerHeight } from \"../../store/modules/content/actions\";\nimport { usePrevious } from \"./usePrevious\";\nexport const usePlayer = () => {\n  var _playerRef$current;\n\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const playingNowId = useSelector(state => state.content.playingNowId);\n  const playingNowTrack = useSelector(state => state.content.playingNowTrack);\n  const dispatch = useDispatch();\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [progressBarWidth, setProgressBarWidth] = useState(\"0%\");\n  const prevPlayingNowId = usePrevious(playingNowId);\n  const audioElementRef = useRef(null);\n  const playerRef = useRef(null);\n  const playerHeight = (playerRef === null || playerRef === void 0 ? void 0 : (_playerRef$current = playerRef.current) === null || _playerRef$current === void 0 ? void 0 : _playerRef$current.offsetHeight) || 0;\n\n  const togglePlayPause = () => {\n    const audioPlayer = audioElementRef.current;\n\n    if (isPlaying && !audioPlayer.paused) {\n      setIsPlaying(false);\n    } else if (!isPlaying && audioPlayer.paused) {\n      setIsPlaying(true);\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    const audioPlayer = audioElementRef.current;\n    const width = Math.floor(audioPlayer.currentTime / audioPlayer.duration * 100) + \"%\";\n    setProgressBarWidth(width);\n  };\n\n  const handleOnEnded = () => {\n    dispatch(removeTrackToPlayer());\n  };\n\n  useEffect(() => {\n    if (playingNowId === prevPlayingNowId) {\n      return;\n    }\n\n    setCurrentTrack(playingNowTrack);\n  }, [playingNowId, prevPlayingNowId, playingNowTrack]);\n  useEffect(() => {\n    const audioPlayer = audioElementRef.current;\n\n    if (prevPlayingNowId === playingNowId) {\n      if (isPlaying && (audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.paused)) {\n        audioPlayer.play();\n      }\n\n      if (!isPlaying && !(audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.paused)) {\n        audioPlayer.pause();\n      }\n    } else {\n      setIsPlaying(true);\n    }\n  }, [isPlaying, playingNowId, prevPlayingNowId]);\n  useEffect(() => {\n    if (playerHeight > 0) {\n      dispatch(setPlayerHeight(playerHeight));\n    }\n  }, [isPlaying, dispatch, playerHeight]);\n  return {\n    getUsePlayer: {\n      currentTrack,\n      progressBarWidth,\n      playerRef,\n      audioElementRef\n    },\n    handleUsePlayer: {\n      togglePlayPause,\n      handleTimeUpdate,\n      handleOnEnded\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/utils/hooks/usePlayer.js"],"names":["useEffect","useState","useRef","useDispatch","useSelector","removeTrackToPlayer","setPlayerHeight","usePrevious","usePlayer","currentTrack","setCurrentTrack","playingNowId","state","content","playingNowTrack","dispatch","isPlaying","setIsPlaying","progressBarWidth","setProgressBarWidth","prevPlayingNowId","audioElementRef","playerRef","playerHeight","current","offsetHeight","togglePlayPause","audioPlayer","paused","handleTimeUpdate","width","Math","floor","currentTime","duration","handleOnEnded","play","pause","getUsePlayer","handleUsePlayer"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  removeTrackToPlayer,\n  setPlayerHeight,\n} from \"../../store/modules/content/actions\";\nimport { usePrevious } from \"./usePrevious\";\n\nexport const usePlayer = () => {\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const playingNowId = useSelector((state) => state.content.playingNowId);\n  const playingNowTrack = useSelector((state) => state.content.playingNowTrack);\n  const dispatch = useDispatch();\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [progressBarWidth, setProgressBarWidth] = useState(\"0%\");\n  const prevPlayingNowId = usePrevious(playingNowId);\n  const audioElementRef = useRef(null);\n  const playerRef = useRef(null);\n  const playerHeight = playerRef?.current?.offsetHeight || 0;\n\n  const togglePlayPause = () => {\n    const audioPlayer = audioElementRef.current;\n\n    if (isPlaying && !audioPlayer.paused) {\n      setIsPlaying(false);\n    } else if (!isPlaying && audioPlayer.paused) {\n      setIsPlaying(true);\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    const audioPlayer = audioElementRef.current;\n    const width =\n      Math.floor((audioPlayer.currentTime / audioPlayer.duration) * 100) + \"%\";\n\n    setProgressBarWidth(width);\n  };\n\n  const handleOnEnded = () => {\n    dispatch(removeTrackToPlayer());\n  };\n\n  useEffect(() => {\n    if (playingNowId === prevPlayingNowId) {\n      return;\n    }\n\n    setCurrentTrack(playingNowTrack);\n  }, [playingNowId, prevPlayingNowId, playingNowTrack]);\n\n  useEffect(() => {\n    const audioPlayer = audioElementRef.current;\n\n    if (prevPlayingNowId === playingNowId) {\n      if (isPlaying && audioPlayer?.paused) {\n        audioPlayer.play();\n      }\n\n      if (!isPlaying && !audioPlayer?.paused) {\n        audioPlayer.pause();\n      }\n    } else {\n      setIsPlaying(true);\n    }\n  }, [isPlaying, playingNowId, prevPlayingNowId]);\n\n  useEffect(() => {\n    if (playerHeight > 0) {\n      dispatch(setPlayerHeight(playerHeight));\n    }\n  }, [isPlaying, dispatch, playerHeight]);\n\n  return {\n    getUsePlayer: {\n      currentTrack,\n      progressBarWidth,\n      playerRef,\n      audioElementRef,\n    },\n    handleUsePlayer: {\n      togglePlayPause,\n      handleTimeUpdate,\n      handleOnEnded\n    }\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}