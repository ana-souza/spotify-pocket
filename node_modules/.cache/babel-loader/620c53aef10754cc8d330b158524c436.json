{"ast":null,"code":"import { useEffect } from 'react';\nimport { getCategoriesFailed, getCategoriesRequest, getCategoriesSuccess } from \"../../store/modules/content/actions\";\nimport { getUserFailed, getUserRequest, getUserSuccess, logout } from \"../../store/modules/user/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { request } from \"../../modules/request\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { endpoints } from \"../../modules/endpoints\";\nconst {\n  getCategories,\n  getUserProfile\n} = endpoints;\nexport const useDashboardRoute = () => {\n  const {\n    auth,\n    content,\n    user\n  } = useSelector(state => state);\n  const {\n    path,\n    url\n  } = useRouteMatch();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const requestOptions = { ...getUserProfile.options,\n      headers: {\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getUserRequest());\n    request(getUserProfile.url, requestOptions).then(data => dispatch(getUserSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getUserFailed(error));\n    });\n  }, [auth, dispatch]);\n  useEffect(() => {\n    const requestOptions = { ...getCategories.options,\n      headers: {\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getCategoriesRequest());\n    request(getCategories.url, requestOptions).then(data => dispatch(getCategoriesSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getCategoriesFailed(error));\n    });\n  }, [auth, dispatch]);\n  return {\n    getUseDashboardRoute: {\n      content,\n      user,\n      path,\n      url\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/utils/hooks/useDashboardRoute.js"],"names":["useEffect","getCategoriesFailed","getCategoriesRequest","getCategoriesSuccess","getUserFailed","getUserRequest","getUserSuccess","logout","useDispatch","useSelector","request","useRouteMatch","endpoints","getCategories","getUserProfile","useDashboardRoute","auth","content","user","state","path","url","dispatch","requestOptions","options","headers","Authorization","accessToken","then","data","catch","error","getUseDashboardRoute"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SACEC,mBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,qCAJP;AAMA,SACEC,aADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,MAJF,QAKO,kCALP;AAOA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAAoCF,SAA1C;AAGA,OAAO,MAAMG,iBAAiB,GAAG,MAAM;AACrC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA0BT,WAAW,CAAEU,KAAD,IAAWA,KAAZ,CAA3C;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAgBV,aAAa,EAAnC;AACA,QAAMW,QAAQ,GAAGd,WAAW,EAA5B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,cAAc,GAAG,EACrB,GAAGT,cAAc,CAACU,OADG;AAErBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASV,IAAI,CAACW,WAAY;AAA5C;AAFY,KAAvB;AAKAL,IAAAA,QAAQ,CAACjB,cAAc,EAAf,CAAR;AAEAK,IAAAA,OAAO,CAACI,cAAc,CAACO,GAAhB,EAAqBE,cAArB,CAAP,CACGK,IADH,CACSC,IAAD,IAAUP,QAAQ,CAAChB,cAAc,CAACuB,IAAD,CAAf,CAD1B,EAEGC,KAFH,CAEUC,KAAD,IAAW;AAChB,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBT,QAAAA,QAAQ,CAACf,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDe,MAAAA,QAAQ,CAAClB,aAAa,CAAC2B,KAAD,CAAd,CAAR;AACD,KAVH;AAWD,GAnBQ,EAmBN,CAACf,IAAD,EAAOM,QAAP,CAnBM,CAAT;AAqBAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,cAAc,GAAG,EACrB,GAAGV,aAAa,CAACW,OADI;AAErBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASV,IAAI,CAACW,WAAY;AAA5C;AAFY,KAAvB;AAKAL,IAAAA,QAAQ,CAACpB,oBAAoB,EAArB,CAAR;AAEAQ,IAAAA,OAAO,CAACG,aAAa,CAACQ,GAAf,EAAoBE,cAApB,CAAP,CACGK,IADH,CACSC,IAAD,IAAUP,QAAQ,CAACnB,oBAAoB,CAAC0B,IAAD,CAArB,CAD1B,EAEGC,KAFH,CAEUC,KAAD,IAAW;AAChB,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBT,QAAAA,QAAQ,CAACf,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDe,MAAAA,QAAQ,CAACrB,mBAAmB,CAAC8B,KAAD,CAApB,CAAR;AACD,KAVH;AAWD,GAnBQ,EAmBN,CAACf,IAAD,EAAOM,QAAP,CAnBM,CAAT;AAqBA,SAAO;AACLU,IAAAA,oBAAoB,EAAE;AACpBf,MAAAA,OADoB;AACXC,MAAAA,IADW;AACLE,MAAAA,IADK;AACCC,MAAAA;AADD;AADjB,GAAP;AAKD,CApDM","sourcesContent":["import { useEffect } from 'react';\nimport {\n  getCategoriesFailed,\n  getCategoriesRequest,\n  getCategoriesSuccess,\n} from \"../../store/modules/content/actions\";\n\nimport {\n  getUserFailed,\n  getUserRequest,\n  getUserSuccess,\n  logout,\n} from \"../../store/modules/user/actions\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { request } from \"../../modules/request\";\n\nimport { useRouteMatch } from \"react-router-dom\";\nimport { endpoints } from \"../../modules/endpoints\";\n\nconst { getCategories, getUserProfile } = endpoints;\n\n\nexport const useDashboardRoute = () => {\n  const { auth, content, user } = useSelector((state) => state);\n  const { path, url } = useRouteMatch();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getUserProfile.options,\n      headers: { Authorization: `Bearer ${auth.accessToken}` },\n    };\n\n    dispatch(getUserRequest());\n\n    request(getUserProfile.url, requestOptions)\n      .then((data) => dispatch(getUserSuccess(data)))\n      .catch((error) => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getUserFailed(error));\n      });\n  }, [auth, dispatch]);\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getCategories.options,\n      headers: { Authorization: `Bearer ${auth.accessToken}` },\n    };\n\n    dispatch(getCategoriesRequest());\n\n    request(getCategories.url, requestOptions)\n      .then((data) => dispatch(getCategoriesSuccess(data)))\n      .catch((error) => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getCategoriesFailed(error));\n      });\n  }, [auth, dispatch]);\n\n  return {\n    getUseDashboardRoute: {\n      content, user, path, url\n    }\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}