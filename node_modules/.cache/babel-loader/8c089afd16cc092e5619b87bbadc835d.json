{"ast":null,"code":"import { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPlaylistTracksRequest, getPlaylistTracksSuccess, getPlaylistTracksFailed } from \"../../store/modules/content/actions\";\nimport { logout } from \"../../store/modules/user/actions\";\nimport { request, sanitizeUrl } from \"../../modules/request\";\nimport { endpoints } from \"../../modules/endpoints\";\nconst {\n  getPlaylistTracks\n} = endpoints;\nexport const useTrackRoute = () => {\n  const {\n    auth,\n    content\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const {\n    playlistId\n  } = useParams();\n  useEffect(() => {\n    const requestOptions = { ...getPlaylistTracks.options,\n      headers: {\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getPlaylistTracksRequest());\n    request(sanitizeUrl(getPlaylistTracks.url, {\n      playlistId\n    }), requestOptions).then(data => dispatch(getPlaylistTracksSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getPlaylistTracksFailed(error));\n    });\n  }, [auth, playlistId, dispatch]);\n  return {\n    content,\n    playlistId\n  };\n};","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/utils/hooks/useTrackRoute.js"],"names":["useEffect","useParams","useDispatch","useSelector","getPlaylistTracksRequest","getPlaylistTracksSuccess","getPlaylistTracksFailed","logout","request","sanitizeUrl","endpoints","getPlaylistTracks","useTrackRoute","auth","content","state","dispatch","playlistId","requestOptions","options","headers","Authorization","accessToken","url","then","data","catch","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,uBAHF,QAIO,qCAJP;AAKA,SAASC,MAAT,QAAuB,kCAAvB;AAEA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,SAA9B;AAEA,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAArC;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAiBhB,SAAS,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,cAAc,GAAG,EACrB,GAAGP,iBAAiB,CAACQ,OADA;AAErBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASR,IAAI,CAACS,WAAY;AAA5C;AAFY,KAAvB;AAKAN,IAAAA,QAAQ,CAACZ,wBAAwB,EAAzB,CAAR;AAEAI,IAAAA,OAAO,CAACC,WAAW,CAACE,iBAAiB,CAACY,GAAnB,EAAwB;AAAEN,MAAAA;AAAF,KAAxB,CAAZ,EAAqDC,cAArD,CAAP,CACGM,IADH,CACSC,IAAD,IAAUT,QAAQ,CAACX,wBAAwB,CAACoB,IAAD,CAAzB,CAD1B,EAEGC,KAFH,CAEUC,KAAD,IAAW;AAChB,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBX,QAAAA,QAAQ,CAACT,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDS,MAAAA,QAAQ,CAACV,uBAAuB,CAACqB,KAAD,CAAxB,CAAR;AACD,KAVH;AAWD,GAnBQ,EAmBN,CAACd,IAAD,EAAOI,UAAP,EAAmBD,QAAnB,CAnBM,CAAT;AAoBA,SAAO;AAAEF,IAAAA,OAAF;AAAWG,IAAAA;AAAX,GAAP;AACD,CA1BM","sourcesContent":["import { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getPlaylistTracksRequest,\n  getPlaylistTracksSuccess,\n  getPlaylistTracksFailed,\n} from \"../../store/modules/content/actions\";\nimport { logout } from \"../../store/modules/user/actions\";\n\nimport { request, sanitizeUrl } from \"../../modules/request\";\nimport { endpoints } from \"../../modules/endpoints\";\n\nconst { getPlaylistTracks } = endpoints;\n\nexport const useTrackRoute = () => {\n  const { auth, content } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { playlistId } = useParams();\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getPlaylistTracks.options,\n      headers: { Authorization: `Bearer ${auth.accessToken}` },\n    };\n\n    dispatch(getPlaylistTracksRequest());\n\n    request(sanitizeUrl(getPlaylistTracks.url, { playlistId }), requestOptions)\n      .then((data) => dispatch(getPlaylistTracksSuccess(data)))\n      .catch((error) => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getPlaylistTracksFailed(error));\n      });\n  }, [auth, playlistId, dispatch]);\n  return { content, playlistId };\n}\n\n"]},"metadata":{},"sourceType":"module"}