{"ast":null,"code":"import { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCategoryPlaylistFailed, getCategoryPlaylistRequest, getCategoryPlaylistSuccess } from \"../../store/modules/content/actions\";\nimport { logout } from \"../../store/modules/user/actions\";\nimport { request, sanitizeUrl } from \"../../modules/request\";\nimport { endpoints } from \"../../modules/endpoints\";\nconst {\n  getCategoryPlaylists\n} = endpoints;\nexport const usePlaylistRoute = () => {\n  const {\n    auth,\n    content\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const {\n    categoryId\n  } = useParams();\n  useEffect(() => {\n    const requestOptions = { ...getCategoryPlaylists.options,\n      headers: {\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getCategoryPlaylistRequest());\n    request(sanitizeUrl(getCategoryPlaylists.url, {\n      categoryId\n    }), requestOptions).then(data => dispatch(getCategoryPlaylistSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getCategoryPlaylistFailed(error));\n    });\n  }, [auth, categoryId, dispatch]);\n  return {\n    content,\n    categoryId\n  };\n};","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/utils/hooks/usePlaylistRoute.js"],"names":["useEffect","useParams","useDispatch","useSelector","getCategoryPlaylistFailed","getCategoryPlaylistRequest","getCategoryPlaylistSuccess","logout","request","sanitizeUrl","endpoints","getCategoryPlaylists","usePlaylistRoute","auth","content","state","dispatch","categoryId","requestOptions","options","headers","Authorization","accessToken","url","then","data","catch","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,yBADF,EAEEC,0BAFF,EAGEC,0BAHF,QAIO,qCAJP;AAMA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,uBAArC;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,SAAjC;AAGA,OAAO,MAAME,gBAAgB,GAAG,MAAM;AACpC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAArC;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAiBhB,SAAS,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,cAAc,GAAG,EACrB,GAAGP,oBAAoB,CAACQ,OADH;AAErBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASR,IAAI,CAACS,WAAY;AAA5C;AAFY,KAAvB;AAKAN,IAAAA,QAAQ,CAACX,0BAA0B,EAA3B,CAAR;AAEAG,IAAAA,OAAO,CACLC,WAAW,CAACE,oBAAoB,CAACY,GAAtB,EAA2B;AAAEN,MAAAA;AAAF,KAA3B,CADN,EAELC,cAFK,CAAP,CAIGM,IAJH,CAISC,IAAD,IAAUT,QAAQ,CAACV,0BAA0B,CAACmB,IAAD,CAA3B,CAJ1B,EAKGC,KALH,CAKUC,KAAD,IAAW;AAChB,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBX,QAAAA,QAAQ,CAACT,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDS,MAAAA,QAAQ,CAACZ,yBAAyB,CAACuB,KAAD,CAA1B,CAAR;AACD,KAbH;AAcD,GAtBQ,EAsBN,CAACd,IAAD,EAAOI,UAAP,EAAmBD,QAAnB,CAtBM,CAAT;AAwBA,SAAO;AAAEF,IAAAA,OAAF;AAAWG,IAAAA;AAAX,GAAP;AACD,CA9BM","sourcesContent":["import { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getCategoryPlaylistFailed,\n  getCategoryPlaylistRequest,\n  getCategoryPlaylistSuccess,\n} from \"../../store/modules/content/actions\";\n\nimport { logout } from \"../../store/modules/user/actions\";\nimport { request, sanitizeUrl } from \"../../modules/request\";\n\nimport { endpoints } from \"../../modules/endpoints\";\n\nconst { getCategoryPlaylists } = endpoints;\n\n\nexport const usePlaylistRoute = () => {\n  const { auth, content } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { categoryId } = useParams();\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getCategoryPlaylists.options,\n      headers: { Authorization: `Bearer ${auth.accessToken}` },\n    };\n\n    dispatch(getCategoryPlaylistRequest());\n\n    request(\n      sanitizeUrl(getCategoryPlaylists.url, { categoryId }),\n      requestOptions\n    )\n      .then((data) => dispatch(getCategoryPlaylistSuccess(data)))\n      .catch((error) => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getCategoryPlaylistFailed(error));\n      });\n  }, [auth, categoryId, dispatch]);\n\n  return { content, categoryId };\n}\n\n"]},"metadata":{},"sourceType":"module"}