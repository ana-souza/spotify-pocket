{"ast":null,"code":"import produce from 'immer';\nimport { ContentReduxType } from './types';\nconst INITIAL_STATE = {\n  categories: [],\n  playlists: [],\n  tracks: [],\n  playingNowId: null,\n  playingNowTrack: null,\n  playerHeight: 0,\n  status: 'idle',\n  errorMessage: ''\n};\nexport default function user(state = INITIAL_STATE, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ContentReduxType.ADD_PLAYER_TRACK:\n        {\n          draft.playingNowId = action.payload.id;\n          draft.playingNowTrack = action.payload;\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORIES_REQUEST:\n        {\n          draft.categories = [];\n          draft.status = 'running';\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORIES_SUCCESS:\n        {\n          draft.errorMessage = '';\n          draft.categories = action.payload;\n          draft.status = 'success';\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORIES_FAILED:\n        {\n          draft.categories = [];\n          draft.errorMessage = action.payload.message;\n          draft.status = 'error';\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_REQUEST:\n        {\n          draft.playlists = [];\n          draft.status = 'running';\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_SUCCESS:\n        {\n          draft.errorMessage = '';\n          draft.playlists = action.payload;\n          draft.status = 'success';\n          break;\n        }\n\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_FAILED:\n        {\n          draft.errorMessage = action.payload.message;\n          draft.playlists = [];\n          draft.status = 'error';\n          break;\n        }\n\n      case ContentReduxType.GET_PLAYLIST_TRACKS_REQUEST:\n        {\n          draft.tracks = [];\n          draft.status = 'running';\n          break;\n        }\n\n      case ContentReduxType.GET_PLAYLIST_TRACKS_SUCCESS:\n        {\n          draft.errorMessage = '';\n          draft.tracks = action.payload.filter(({\n            track\n          }) => track);\n          draft.status = 'success';\n          break;\n        }\n\n      case ContentReduxType.GET_PLAYLIST_TRACKS_FAILED:\n        {\n          draft.tracks = [];\n          draft.errorMessage = action.payload.message;\n          draft.status = 'error';\n          break;\n        }\n\n      case ContentReduxType.REMOVE_PLAYER_TRACK:\n        {\n          draft.playingNowId = null;\n          draft.playingNowTrack = null;\n          draft.playerHeight = 0;\n          break;\n        }\n\n      case ContentReduxType.SET_PLAYER_HEIGHT:\n        {\n          draft.playerHeight = action.payload;\n          break;\n        }\n\n      default:\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/nap_s/Codenation/react-17/src/store/modules/content/reducer.js"],"names":["produce","ContentReduxType","INITIAL_STATE","categories","playlists","tracks","playingNowId","playingNowTrack","playerHeight","status","errorMessage","user","state","action","draft","type","ADD_PLAYER_TRACK","payload","id","GET_CATEGORIES_REQUEST","GET_CATEGORIES_SUCCESS","GET_CATEGORIES_FAILED","message","GET_CATEGORY_PLAYLIST_REQUEST","GET_CATEGORY_PLAYLIST_SUCCESS","GET_CATEGORY_PLAYLIST_FAILED","GET_PLAYLIST_TRACKS_REQUEST","GET_PLAYLIST_TRACKS_SUCCESS","filter","track","GET_PLAYLIST_TRACKS_FAILED","REMOVE_PLAYER_TRACK","SET_PLAYER_HEIGHT"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { ContentReduxType } from './types';\n\nconst INITIAL_STATE = {\n  categories: [],\n  playlists: [],\n  tracks: [],\n  playingNowId: null,\n  playingNowTrack: null,\n  playerHeight: 0,\n  status: 'idle',\n  errorMessage: '',\n};\n\nexport default function user(state = INITIAL_STATE, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ContentReduxType.ADD_PLAYER_TRACK: {\n        draft.playingNowId = action.payload.id;\n        draft.playingNowTrack = action.payload;\n        break;\n      }\n      case ContentReduxType.GET_CATEGORIES_REQUEST: {\n        draft.categories = [];\n        draft.status = 'running';\n        break;\n      }\n      case ContentReduxType.GET_CATEGORIES_SUCCESS: {\n        draft.errorMessage = '';\n        draft.categories = action.payload;\n        draft.status = 'success';\n        break;\n      }\n      case ContentReduxType.GET_CATEGORIES_FAILED: {\n        draft.categories = [];\n        draft.errorMessage = action.payload.message;\n        draft.status = 'error';\n        break;\n      }\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_REQUEST: {\n        draft.playlists = [];\n        draft.status = 'running';\n        break;\n      }\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_SUCCESS: {\n        draft.errorMessage = '';\n        draft.playlists = action.payload;\n        draft.status = 'success';\n        break;\n      }\n      case ContentReduxType.GET_CATEGORY_PLAYLIST_FAILED: {\n        draft.errorMessage = action.payload.message;\n        draft.playlists = [];\n        draft.status = 'error';\n        break;\n      }\n      case ContentReduxType.GET_PLAYLIST_TRACKS_REQUEST: {\n        draft.tracks = [];\n        draft.status = 'running';\n        break;\n      }\n      case ContentReduxType.GET_PLAYLIST_TRACKS_SUCCESS: {\n        draft.errorMessage = '';\n        draft.tracks = action.payload.filter(({ track }) => track);\n        draft.status = 'success';\n        break;\n      }\n      case ContentReduxType.GET_PLAYLIST_TRACKS_FAILED: {\n        draft.tracks = [];\n        draft.errorMessage = action.payload.message;\n        draft.status = 'error';\n        break;\n      }\n      case ContentReduxType.REMOVE_PLAYER_TRACK: {\n        draft.playingNowId = null;\n        draft.playingNowTrack = null;\n        draft.playerHeight = 0;\n        break;\n      }\n      case ContentReduxType.SET_PLAYER_HEIGHT: {\n        draft.playerHeight = action.payload;\n        break;\n      }\n      default:\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}